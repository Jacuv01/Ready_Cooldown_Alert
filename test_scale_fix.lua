-- Test script para verificar el comportamiento correcto de animScale
-- Autor: Assistant
-- Este script verifica que animScale funcione como multiplicador

print("=== üß™ TEST DE ESCALA CORRECTA ===")
print("Verificando que animScale funcione como multiplicador:")
print("  ‚Ä¢ animScale = 1.0 deber√≠a dar tama√±o normal")
print("  ‚Ä¢ animScale = 0.5 deber√≠a dar iconos peque√±os")
print("  ‚Ä¢ animScale = 2.0 deber√≠a dar iconos grandes")
print("")

-- Verificar que el addon est√° cargado
if not ReadyCooldownAlertDB then
    print("‚ùå ERROR: ReadyCooldownAlertDB no encontrado")
    return
end

if not AnimationData then
    print("‚ùå ERROR: AnimationData no encontrado")
    return
end

if not _G.AnimationProcessor then
    print("‚ùå ERROR: AnimationProcessor no encontrado")
    return
end

-- Funci√≥n para probar diferentes escalas
function TestScale(scaleValue, description)
    print("üìè Probando " .. description .. " (animScale = " .. scaleValue .. "):")
    
    -- Guardar configuraci√≥n original
    local originalScale = ReadyCooldownAlertDB.animScale
    local originalIconSize = ReadyCooldownAlertDB.iconSize
    
    -- Configurar test
    ReadyCooldownAlertDB.animScale = scaleValue
    ReadyCooldownAlertDB.iconSize = 75 -- Tama√±o base est√°ndar
    
    -- Simular una animaci√≥n pulse
    local animationState = AnimationData:CalculateAnimationState("pulse", 0.2, 0.6) -- Hold phase
    
    if animationState then
        print("  üî∏ Factor de animaci√≥n: " .. tostring(animationState.scale))
        
        -- Calcular escala final como lo hace AnimationProcessor
        local finalScale = ReadyCooldownAlertDB.iconSize * ReadyCooldownAlertDB.animScale * animationState.scale
        print("  üî∏ C√°lculo: " .. ReadyCooldownAlertDB.iconSize .. " √ó " .. ReadyCooldownAlertDB.animScale .. " √ó " .. animationState.scale .. " = " .. finalScale)
        print("  üî∏ Tama√±o final: " .. finalScale .. " pixeles")
        
        -- Verificar l√≥gica
        local expectedSize = 75 * scaleValue * animationState.scale
        if math.abs(finalScale - expectedSize) < 0.1 then
            print("  ‚úÖ Correcto!")
        else
            print("  ‚ùå Error en el c√°lculo")
        end
    else
        print("  ‚ùå No se pudo obtener estado de animaci√≥n")
    end
    
    -- Restaurar configuraci√≥n
    ReadyCooldownAlertDB.animScale = originalScale
    ReadyCooldownAlertDB.iconSize = originalIconSize
    print("")
end

-- Probar diferentes escalas
TestScale(0.5, "iconos peque√±os")
TestScale(1.0, "tama√±o normal")
TestScale(1.5, "iconos medianos")
TestScale(2.0, "iconos grandes")

print("=== üéØ RESULTADO ESPERADO ===")
print("Con iconSize = 75 y diferentes animScale:")
print("  ‚Ä¢ animScale 0.5 ‚Üí 37.5 pixeles (peque√±o)")
print("  ‚Ä¢ animScale 1.0 ‚Üí 75 pixeles (normal)")
print("  ‚Ä¢ animScale 1.5 ‚Üí 112.5 pixeles (mediano)")
print("  ‚Ä¢ animScale 2.0 ‚Üí 150 pixeles (grande)")
print("")
print("Los factores de animaci√≥n ahora son relativos (1.0 = normal)")
print("El tama√±o final se calcula: iconSize √ó animScale √ó factorAnimaci√≥n")

-- Funci√≥n para probar todas las animaciones
function TestAllAnimationScales()
    print("=== üé≠ PROBANDO TODAS LAS ANIMACIONES ===")
    
    local animations = {"pulse", "bounce", "fade", "zoom", "glow"}
    ReadyCooldownAlertDB.animScale = 1.5
    ReadyCooldownAlertDB.iconSize = 75
    
    for _, animId in ipairs(animations) do
        print("üî∏ " .. string.upper(animId) .. ":")
        
        -- Probar diferentes fases
        local phases = {
            {time = 0.05, total = 0.6, desc = "fade-in"},
            {time = 0.3, total = 0.6, desc = "hold"},
            {time = 0.55, total = 0.6, desc = "fade-out"}
        }
        
        for _, phase in ipairs(phases) do
            local state = AnimationData:CalculateAnimationState(animId, phase.time, phase.total)
            if state then
                local finalSize = 75 * 1.5 * state.scale
                print("    " .. phase.desc .. ": factor=" .. string.format("%.2f", state.scale) .. 
                      ", size=" .. string.format("%.1f", finalSize) .. "px")
            end
        end
        print("")
    end
end

print("Para probar todas las animaciones ejecuta: TestAllAnimationScales()")
